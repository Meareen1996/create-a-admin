api：ajax相关
assets： 公共资源
components：非路由组件
config：配置
pages：路由组件
utils：工具模块
app.js 应用根组件
index.js 入口js

一级路由：登录页，和主界面

对代理的理解
1).是什么？
    具有特定功能的程序
2).运行在哪？
    前台运用端
    只能在开发时使用
3).作用？
    解决开发时的ajax请求跨域问题
    a.监视并拦截请求(3000)
    b.转发请求
4).配置代理
    告诉代理服务器一些信息：比如转发的目标地址
    开发环境：前端工程师
    生产环境：后端工程师 


生命周期函数
 componentWillMount与componentDidMount的比较
 componentWillMount：在第一次render()前调用一次，为第一次render（）准备数据（同步）
 componentDidMount:在第一次render()之后调用一次，启动异步任务，后面异步更新状态

 jsonp请求的原理：用来解决get类型的ajax请求跨域问题
 它的本质不是ajax请求,而是一般的get请求。
 浏览器端：在发请求前，准备了一个准备处理返回回来的数据的回调函数。发送get请求的时候，除了请求地址，还要把这个回调函数传过去。请求回来的是一段js代码。这段代码是一个函数执行的代码
 服务器端：返回一个函数执行代码，并把数据作为参数给传回来。
基本原理：动态生成<script>来请求后台接口(src就是接口的url)
定义好用于接收响应数据的函数，并讲函数名通过请求参数提交给后台
服务器端：接收到请求处理产生结果数据后，返回一个函数调用js代码，
并将结果数据作为实参传入函数调用
浏览器端：收到响应自动执行函数调用的js代码，也就执行了提前定义好的回调函数，并得到了需要的结果数据


关于setState：
    setState()不能立即获取最新的状态，因为setState()是异步更新状态的
    